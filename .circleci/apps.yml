# CircleCI's configuration for Arnold-apps
#
# This configuration is executed once patched by the bin/ci script
version: 2.1


jobs:

  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/fun

    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  check-changelog:
    docker:
      - image: circleci/buildpack-deps:buster-scm
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun

    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80


  # Test the application
  test-app:
    # We use the machine executor, i.e. a VM, not a container
    machine:
      image: ubuntu-2004:202201-02
      # Prevent cache-related issues
      docker_layer_caching: false
    working_directory: ~/fun

    parameters:
      app:
        type: string

    steps:
      - checkout

      - run:
          name: Define Environment Variable at Runtime
          command: |
            make .env
            cat .env >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install the kubectl client and k3d
          command: |
            export KUBECTL_RELEASE="v1.20.2"
            curl -Lo "${HOME}/bin/kubectl" "https://dl.k8s.io/release/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl"
            curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl.sha256"
            echo "$(</tmp/kubectl.sha256) ${HOME}/bin/kubectl" | sha256sum --check
            chmod 755 "${HOME}/bin/kubectl"

            export K3D_RELEASE="v4.2.0"
            curl -Lo "${HOME}/bin/k3d" "https://github.com/rancher/k3d/releases/download/${K3D_RELEASE}/k3d-linux-amd64"
            curl -sL https://github.com/rancher/k3d/releases/download/${K3D_RELEASE}/sha256sum.txt | \
              grep _dist/k3d-linux-amd64 | \
              sed "s|_dist/k3d-linux-amd64|${HOME}/bin/k3d|" | \
              sha256sum --check
            chmod 755 "${HOME}/bin/k3d"

      - run:
          name: Install a recent yq release
          command: |
            export YQ_RELEASE="v4.21.1"
            curl -Lo /tmp/yq_linux_amd64 "https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/yq_linux_amd64"
            curl -Lo /tmp/checksums "https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/checksums"
            curl -Lo /tmp/checksums_hashes_order "https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/checksums_hashes_order"
            curl -Lo /tmp/extract-checksum.sh "https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/extract-checksum.sh"
            cd /tmp && \
              chmod +x extract-checksum.sh && \
              ./extract-checksum.sh SHA-256 yq_linux_amd64 | awk '{print $2" "$1}' | sha256sum --check
            mv yq_linux_amd64 "${HOME}/bin/yq" && \
              chmod 755 "${HOME}/bin/yq"

      - run:
          name: Configure sysctl limits for Elasticsearch
          command: |
            # Elasticsearch requires to increase this setting's default value
            sudo sysctl -w vm/max_map_count=262144

      - run:
          name: Run local k3d cluster & configure environment
          command: |
            # Bootstrap the k3d cluster with the following specific settings :
            # - use standard HTTP and HTTPS ports
            # - pre-provision 15 volumes instead of 100
            MINIMUM_AVAILABLE_RWX_VOLUME=15 \
            K3D_BIND_HOST_PORT_HTTP=80 \
            K3D_BIND_HOST_PORT_HTTPS=443 \
              make cluster

      - run:
          name: Test the "<< parameters.app >>" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -v ${PWD}/apps:/app/apps -c eugene -e ci -a << parameters.app >> bootstrap

      - run:
          name: Switch the "<< parameters.app >>" application
          command: |
            # Bootstrap app
            bin/arnold -v ${PWD}/apps:/app/apps -c eugene -e ci -a << parameters.app >> switch

      - run:
          name: Test the "<< parameters.app >>" deployment
          command: |
            bin/ci route << parameters.app >>

workflows:
  version: 2

  arnold:
    jobs:

      # Quality jobs
      - lint-git:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - lint-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      - test-app:
          matrix:
            parameters:
              app: []
